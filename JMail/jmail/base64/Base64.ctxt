#BlueJ class context
comment0.params=str
comment0.target=java.lang.String\ encode(java.lang.String)
comment0.text=\r\n\ <p>\r\n\ Encodes\ a\ string.\r\n\ </p>\r\n\ <p>\r\n\ Before\ the\ string\ is\ encoded\ in\ Base64,\ it\ is\ converted\ in\ a\ binary\r\n\ sequence\ using\ the\ system\ default\ charset.\r\n\ </p>\r\n\ \r\n\ @param\ str\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string.\r\n\ @return\ The\ encoded\ string.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n
comment1.params=str\ charset
comment1.target=java.lang.String\ encode(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ <p>\r\n\ Encodes\ a\ string.\r\n\ </p>\r\n\ <p>\r\n\ Before\ the\ string\ is\ encoded\ in\ Base64,\ it\ is\ converted\ in\ a\ binary\r\n\ sequence\ using\ the\ supplied\ charset.\r\n\ </p>\r\n\ \r\n\ @param\ str\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ string\r\n\ @param\ charset\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ charset\ name.\r\n\ @return\ The\ encoded\ string.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n\ @since\ 1.2\r\n
comment10.params=source\ target\ wrapAt
comment10.target=void\ encode(java.io.File,\ java.io.File,\ int)
comment10.text=\r\n\ <p>\r\n\ Encodes\ data\ from\ the\ given\ source\ file\ contents\ and\ writes\ them\ in\ the\r\n\ given\ target\ file,\ wrapping\ every\ encoded\ line\ every\ <em>wrapAt</em>\r\n\ characters.\ A\ <em>wrapAt</em>\ value\ less\ than\ 1\ disables\ wrapping.\r\n\ </p>\r\n\ \r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ file,\ from\ which\ decoded\ data\ are\ read.\r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ target\ file,\ in\ which\ encoded\ data\ are\ written.\r\n\ @param\ wrapAt\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ max\ line\ length\ for\ encoded\ data.\ If\ less\ than\ 1\ no\ wrap\r\n\ \ \ \ \ \ \ \ \ \ \ \ is\ applied.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n\ @since\ 1.3\r\n
comment11.params=source\ target
comment11.target=void\ encode(java.io.File,\ java.io.File)
comment11.text=\r\n\ <p>\r\n\ Encodes\ data\ from\ the\ given\ source\ file\ contents\ and\ writes\ them\ in\ the\r\n\ given\ target\ file.\r\n\ </p>\r\n\ \r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ file,\ from\ which\ decoded\ data\ are\ read.\r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ target\ file,\ in\ which\ encoded\ data\ are\ written.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n\ @since\ 1.3\r\n
comment12.params=source\ target
comment12.target=void\ decode(java.io.File,\ java.io.File)
comment12.text=\r\n\ <p>\r\n\ Decodes\ data\ from\ the\ given\ source\ file\ contents\ and\ writes\ them\ in\ the\r\n\ given\ target\ file.\r\n\ </p>\r\n\ \r\n\ @param\ source\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ file,\ from\ which\ encoded\ data\ are\ read.\r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ target\ file,\ in\ which\ decoded\ data\ are\ written.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n\ @since\ 1.3\r\n
comment13.params=inputStream\ outputStream
comment13.target=void\ copy(java.io.InputStream,\ java.io.OutputStream)
comment13.text=\r\n\ Copies\ data\ from\ a\ stream\ to\ another.\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ input\ stream.\r\n\ @param\ outputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ output\ stream.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ a\ unexpected\ I/O\ error\ occurs.\r\n
comment2.params=str
comment2.target=java.lang.String\ decode(java.lang.String)
comment2.text=\r\n\ <p>\r\n\ Decodes\ the\ supplied\ string.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ string\ is\ decoded\ into\ a\ binary\ sequence,\ and\ then\ the\r\n\ sequence\ is\ encoded\ with\ the\ system\ default\ charset\ and\ returned.\r\n\ </p>\r\n\ \r\n\ @param\ str\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ encoded\ string.\r\n\ @return\ The\ decoded\ string.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n
comment3.params=str\ charset
comment3.target=java.lang.String\ decode(java.lang.String,\ java.lang.String)
comment3.text=\r\n\ <p>\r\n\ Decodes\ the\ supplied\ string.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ string\ is\ decoded\ into\ a\ binary\ sequence,\ and\ then\ the\r\n\ sequence\ is\ encoded\ with\ the\ supplied\ charset\ and\ returned.\r\n\ </p>\r\n\ \r\n\ @param\ str\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ encoded\ string.\r\n\ @param\ charset\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ charset\ name.\r\n\ @return\ The\ decoded\ string.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n\ @since\ 1.2\r\n
comment4.params=bytes
comment4.target=byte[]\ encode(byte[])
comment4.text=\r\n\ <p>\r\n\ Encodes\ a\ binary\ sequence.\r\n\ </p>\r\n\ <p>\r\n\ If\ data\ are\ large,\ i.e.\ if\ you\ are\ working\ with\ large\ binary\ files,\r\n\ consider\ to\ use\ a\ {@link\ Base64OutputStream}\ instead\ of\ loading\ too\ much\r\n\ data\ in\ memory.\r\n\ </p>\r\n\ \r\n\ @param\ bytes\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ sequence.\r\n\ @return\ The\ encoded\ sequence.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n\ @since\ 1.2\r\n
comment5.params=bytes\ wrapAt
comment5.target=byte[]\ encode(byte[],\ int)
comment5.text=\r\n\ <p>\r\n\ Encodes\ a\ binary\ sequence,\ wrapping\ every\ encoded\ line\ every\r\n\ <em>wrapAt</em>\ characters.\ A\ <em>wrapAt</em>\ value\ less\ than\ 1\ disables\r\n\ wrapping.\r\n\ </p>\r\n\ <p>\r\n\ If\ data\ are\ large,\ i.e.\ if\ you\ are\ working\ with\ large\ binary\ files,\r\n\ consider\ to\ use\ a\ {@link\ Base64OutputStream}\ instead\ of\ loading\ too\ much\r\n\ data\ in\ memory.\r\n\ </p>\r\n\ \r\n\ @param\ bytes\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ source\ sequence.\r\n\ @param\ wrapAt\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ max\ line\ length\ for\ encoded\ data.\ If\ less\ than\ 1\ no\ wrap\r\n\ \ \ \ \ \ \ \ \ \ \ \ is\ applied.\r\n\ @return\ The\ encoded\ sequence.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n\ @since\ 1.2\r\n
comment6.params=bytes
comment6.target=byte[]\ decode(byte[])
comment6.text=\r\n\ <p>\r\n\ Decodes\ a\ binary\ sequence.\r\n\ </p>\r\n\ <p>\r\n\ If\ data\ are\ large,\ i.e.\ if\ you\ are\ working\ with\ large\ binary\ files,\r\n\ consider\ to\ use\ a\ {@link\ Base64InputStream}\ instead\ of\ loading\ too\ much\r\n\ data\ in\ memory.\r\n\ </p>\r\n\ \r\n\ @param\ bytes\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ encoded\ sequence.\r\n\ @return\ The\ decoded\ sequence.\r\n\ @throws\ RuntimeException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ unexpected\ error\ occurs.\r\n\ @since\ 1.2\r\n
comment7.params=inputStream\ outputStream
comment7.target=void\ encode(java.io.InputStream,\ java.io.OutputStream)
comment7.text=\r\n\ <p>\r\n\ Encodes\ data\ from\ the\ given\ input\ stream\ and\ writes\ them\ in\ the\ given\r\n\ output\ stream.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ input\ stream\ is\ read\ until\ its\ end\ is\ reached,\ but\ it's\ not\r\n\ closed\ by\ this\ method.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ output\ stream\ is\ nor\ flushed\ neither\ closed\ by\ this\ method.\r\n\ </p>\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ input\ stream.\r\n\ @param\ outputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ output\ stream.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n
comment8.params=inputStream\ outputStream\ wrapAt
comment8.target=void\ encode(java.io.InputStream,\ java.io.OutputStream,\ int)
comment8.text=\r\n\ <p>\r\n\ Encodes\ data\ from\ the\ given\ input\ stream\ and\ writes\ them\ in\ the\ given\r\n\ output\ stream,\ wrapping\ every\ encoded\ line\ every\ <em>wrapAt</em>\r\n\ characters.\ A\ <em>wrapAt</em>\ value\ less\ than\ 1\ disables\ wrapping.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ input\ stream\ is\ read\ until\ its\ end\ is\ reached,\ but\ it's\ not\r\n\ closed\ by\ this\ method.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ output\ stream\ is\ nor\ flushed\ neither\ closed\ by\ this\ method.\r\n\ </p>\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ input\ stream\ from\ which\ clear\ data\ are\ read.\r\n\ @param\ outputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ output\ stream\ in\ which\ encoded\ data\ are\ written.\r\n\ @param\ wrapAt\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ max\ line\ length\ for\ encoded\ data.\ If\ less\ than\ 1\ no\ wrap\r\n\ \ \ \ \ \ \ \ \ \ \ \ is\ applied.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n
comment9.params=inputStream\ outputStream
comment9.target=void\ decode(java.io.InputStream,\ java.io.OutputStream)
comment9.text=\r\n\ <p>\r\n\ Decodes\ data\ from\ the\ given\ input\ stream\ and\ writes\ them\ in\ the\ given\r\n\ output\ stream.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ input\ stream\ is\ read\ until\ its\ end\ is\ reached,\ but\ it's\ not\r\n\ closed\ by\ this\ method.\r\n\ </p>\r\n\ <p>\r\n\ The\ supplied\ output\ stream\ is\ nor\ flushed\ neither\ closed\ by\ this\ method.\r\n\ </p>\r\n\ \r\n\ @param\ inputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ input\ stream\ from\ which\ encoded\ data\ are\ read.\r\n\ @param\ outputStream\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ output\ stream\ in\ which\ decoded\ data\ are\ written.\r\n\ @throws\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ If\ an\ I/O\ error\ occurs.\r\n
numComments=14
